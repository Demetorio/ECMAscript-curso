const users = {
    demetori: {
        country: 'MX'
    },
    mezzaluna: {
        country: 'PE'
    }
}
console.log(users.demetori.country); // => RESULTADO: 'MX'

console.log(users.inume.country); // => RESULTADO: TypeError ...

console.log(users.inume?.country); // => RESULTADO: undefined

//EXPLICACI√ìN: el signo de interrogaci√≥n "consulta" si existe el atributo, si no existe devolver√° un undefined, impidiendo que salga un error que rompa el c√≥digo

/*NOTA DE UN COMENTARIO DE PLATZI No abuses del encadenamiento opcional
üîó El encadenamiento opcional se debe utilizar √∫nicamente cuando probablemente un valor no exista.
.
Por ejemplo, en un objeto usuario que siempre existe, pero la propiedad redes es opcional, entonces se deber√≠a escribir usuario.redes?.facebook y no usuario?.redes?.facebook.
.
Si abusas del encadenamiento opcional y existe un error en un objeto, el programa podr√≠a ‚Äúocultarlo‚Äù por un undefined, provocando que el debugging sea m√°s complicado. */